@page "/dashboard"
@inject ILogger logger
@inject StockService stockService
@using SoapExtensions
@attribute [Authorize]


<PageTitle>Dashboard</PageTitle>

<section>
    <h1>
        Dashboard
    </h1>
    <article>
        <h3>Your Stock@(user?.Stocks?.Count is { } amm ? amm > 1 ? "s" : "" : "")</h3>
        
        <a role="button" class="contrast outline" style="color:green;border-color: green" href=/view-bare-stocks type="button" >Buy Stocks</a>
        
        @if (user?.Stocks is not null && user.Stocks.Any())
        {
            <table role="list">
            <thead>
                <td>Ticker</td>
                
            <td>
                Current Stock Price 
                        
            </td>
            
                
            <td>Profit</td>
            <td style="text-align: center"><a href="javascript:void(0);" role="button" type="button" class="contrast outline" @onclick=RefreshStockPrices aria-busy=@stockList?.All(x => x.LoadingState == LoadingState.Loaded) disabled=@(stockList?.Any(x => x.LoadingState != LoadingState.Loaded)) style="padding: 10px" >Refresh All</a></td>
            <td>Sell</td>
                
            </thead>
            <tbody>
            @if (stockList is null)
            {
                <i class="spin material-icons" style="text-align: center">refresh</i>
            }
            else
            {
                
            @foreach (var item in stockList)
            {
                <tr>
                    <td>
                        @item.PriceInfo.Ticker
                    </td>
                    <td style="text-align: start">
                        @switch (item.LoadingState)
                        {
                            case LoadingState.InitialLoad:
                                <i class="spin material-icons" style="text-align: center">refresh</i>
                                break;
                            case LoadingState.Loaded:
                                <p style="margin: 0">@item.PriceInfo.Price.ToString("C")</p>
                                break;
                            case LoadingState.Refreshing:
                                <p aria-busy="true" style="margin: 0">@item.PriceInfo.Price.ToString("C")</p>
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    </td>
                    <td style="text-align: start">
                        @if (item.LoadingState == LoadingState.Loaded)
                        {
                            var stock = user!.Stocks.First(x => x.Ticker == item.PriceInfo.Ticker);
                            var profit = (item.PriceInfo.Price - stock.PriceBoughtAt) * stock.Amount;
                            var profitColor = profit > 0 ? "green" : "red";
                            var displayPrice = profit >= 0 ? profit.ToString("C") : "-" + Math.Abs(profit).ToString("C");
                            <p style="margin: 0;color:@profitColor">@displayPrice</p>
                        }
                        else
                        {
                            <i class="spin material-icons" style="text-align: center">refresh</i>
                        }
                    </td>
                    <td style="text-align: center">

                        <i disabled="@(item.LoadingState != LoadingState.Loaded)" onclick=@(() => item.LoadingState == LoadingState.Loaded ? RefreshStockPrice(item) : Task.CompletedTask) class="material-icons @(item.LoadingState == LoadingState.Refreshing ? "spin" : "")" style="text-align: center">refresh</i>
                        @*<button @onclick=@(() => RefreshStockPrice(item)) class="secondary">
                                <i class="material-icons">refresh</i>
                            </button>*@
                    </td>
                    <td>
                        <a href="/sell-stock/@stockMap[item.PriceInfo.Ticker].Id">Sell @item.PriceInfo.Ticker</a>
                    </td>
                </tr>
            }
            }
            </tbody>
        </table>
        }
        else
        {
            <h4>You dont own any stocks yet!</h4>
        }
        
    </article>
</section>
@code {
    [CascadingParameter]
    public MainLayout? Layout { get; set; }
    private User? user => Layout?.User;
    private List<StockVM>? stockList;
    private Dictionary<string, Stock> stockMap = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshStocksFromDatabase();
        Layout.RefreshRequested += async () => await RefreshStocksFromDatabase();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);


    }

    private async Task RefreshStocksFromDatabase()
    {
        stockList = new(user?.Stocks?.Count ?? 0);
        user.Stocks.ForEach(x =>
        {
            var vm = new StockVM(new PriceInfo(x.Ticker, x.PriceBoughtAt, true), LoadingState.InitialLoad);
            stockList.Add(vm);
            if(!stockMap.TryAdd(x.Ticker, x))
                stockMap[x.Ticker] = x;
            
        });
        StateHasChanged();
        if (user?.Stocks is { } stocks && stocks.Count > 0)
        {
            var prices = await stockService.BatchGetCurrentStockPrices(user.Stocks.Select(x => x.Ticker).ToArray());
            foreach(var priceInfo in prices)
            {
                stockList.FirstRef(x => x.PriceInfo.Ticker == priceInfo.Ticker) = new(priceInfo, LoadingState.Loaded);
            }
            

        }
    }

    private async Task RefreshStockPrices()
    {
        stockList!.ForEach(x => x.LoadingState = LoadingState.Refreshing);
        await InvokeAsync(StateHasChanged);
        await stockService.BatchGetCurrentStockPrices(user.Stocks.Select(x => x.Ticker).ToArray()).Then(x => x.ForEach((p,index) => {
            stockList[index] = new(p, LoadingState.Loaded);
            StateHasChanged();
        }));
    }
    private async Task RefreshStockPrice(StockVM item)
    {

        var stock = stockList.Find(x => x.PriceInfo == item.PriceInfo)!;
        stock.LoadingState = LoadingState.Refreshing;
        await InvokeAsync(StateHasChanged);
        var res = await stockService.GetTickerDataAsync(item.PriceInfo.Ticker);
        stock.PriceInfo.Price = res.Match(x => x.Price, _ => item.PriceInfo.Price);
        stock.LoadingState = LoadingState.Loaded;
        await InvokeAsync(StateHasChanged);
    }
    private enum LoadingState
    {
        InitialLoad,
        Loaded,
        Refreshing
    }
    private class StockVM 
    {
        public PriceInfo PriceInfo {get; set;}
        public LoadingState LoadingState {get; set;}

        public StockVM(PriceInfo p, LoadingState l)
        {
            this.PriceInfo = p;
            this.LoadingState = l;
        }
    }
}