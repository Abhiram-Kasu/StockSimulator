@page "/buy-stocks"
@inject StockService StockService 

@if (_loading) 
{
    <p>Loading...</p>
}
else
{

    <h3>Buy Stocks</h3>

    <input placeholder="Search for a Stock here: " @oninput="SearchStocks"/>

    @if (_searchResults.Count == 0)
    {
        <p>No results found.</p> 
    }
    else
    {
        <table>
            @foreach (var result in _searchResults)
            {
                <tr>
                    <td>@result.Symbol</td>
                    <td>@result.Name</td>
                    <td>
                        <button style="background-color: green" @onclick="@(() => BuyStock(result))">Buy</button>
                    </td>
                </tr>
            }
        </table>
    }

}

@code {

    private bool _loading = true;
    private List<BareStock> _allStocks = new();
    private string _searchTerm;
    private List<BareStock> _searchResults = new();

    protected override async Task OnInitializedAsync()
    {
        _allStocks = await StockService.GetAllBareStocks();
        _loading = false;
    }

    private void SearchStocks(ChangeEventArgs args)
    {
        _searchTerm = args.Value as string ?? throw new NullReferenceException();
        if (string.IsNullOrEmpty(_searchTerm))
        {
            _searchResults.Clear();
            return;
        }
        _searchResults = _allStocks
            .Where(s => s.Name.Contains(_searchTerm) || s.Symbol.Contains(_searchTerm))
            .ToList();
    }
  
    private void BuyStock(BareStock stock) 
    {
    // Redirect to buy page 
    }

}