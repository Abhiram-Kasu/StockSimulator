@page "/profile/edit"
@attribute [Authorize]
@inject IDbContextFactory<DatabaseContext> factory
@inject NavigationManager _navManager
@inject UsersService _usersService

<PageTitle>Edit Profile</PageTitle>

<section>
    <h1>
        Profile
    </h1>
    <article>
        <h2>
            Profile Information
        </h2>
        <p>
            Update your account's profile information.
        </p>
        <EditForm Model="profileInformationForm" OnValidSubmit="SaveProfileInformation">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="name">Name</label>
                <InputText @bind-Value="profileInformationForm.Name" id="name" />
                <small>
                    <ValidationMessage For="() => profileInformationForm.Name" />
                </small>
            </div>
            <div>
                <label for="email">Email address</label>
                <InputText @bind-Value="profileInformationForm.Email" type="email" id="email" />
                <small>
                    <ValidationMessage For="() => profileInformationForm.Email" />
                    @if (!String.IsNullOrEmpty(profileFormMessage))
                    {
                        @profileFormMessage
                    }
                </small>
            </div>
            <div class="grid">
                <button type="submit">
                    Save
                </button>
            </div>
        </EditForm>
    </article>
    <article>
        <h2>
            Update Password
        </h2>
        <p>
            Update your accounts current password.
        </p>
        <EditForm Model="passwordForm" OnValidSubmit="UpdatePassword">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="current-password">Current Password</label>
                <InputText @bind-Value="passwordForm.CurrentPassword" type="password" id="current-password" />
                <small>
                    <ValidationMessage For="() => passwordForm.CurrentPassword" />
                    @if (!String.IsNullOrEmpty(passwordFormMessage))
                    {
                        @passwordFormMessage
                    }
                </small>
            </div>
            <div>
                <label for="new-password">New Password</label>
                <InputText @bind-Value="passwordForm.NewPassword" type="password" id="new-password" />
                <small>
                    <ValidationMessage For="() => passwordForm.NewPassword" />
                </small>
            </div>
            <div>
                <label for="confirm-password">Confirm Password</label>
                <InputText @bind-Value="passwordForm.ConfirmPassword" type="password" id="confirm-password" />
                <small>
                    <ValidationMessage For="() => passwordForm.ConfirmPassword" />
                </small>
            </div>
            <div class="grid">
                <button type="submit">
                    Save
                </button>
            </div>
        </EditForm>
    </article>
</section>
@code {
    [CascadingParameter]
    public MainLayout? Layout { get; set; }
    private User? user => Layout.User;
    private ProfileInformationForm profileInformationForm { get; set; } = new();
    private string profileFormMessage = "";
    private PasswordForm passwordForm { get; set; } = new();
    private string passwordFormMessage = "";


    protected override async Task OnInitializedAsync()
    {
        // get user profile
        profileInformationForm.Name = user.Name;
        profileInformationForm.Email = user.Email;
    }

    private async Task SaveProfileInformation()
    {
        using var db = factory.CreateDbContext();
        var currentUser = db.Users.Find(user.Id);

        if (currentUser != null)
        {
            var existingUser = await _usersService.FindUserByEmailAsync(profileInformationForm.Email);

            if (existingUser != null && user.Id != existingUser.Id)
            {
                profileFormMessage = "Email already in use.";
                return;
            }

            currentUser.Email = profileInformationForm.Email;
            currentUser.Name = profileInformationForm.Name;

            db.Users.Save(currentUser);
            StateHasChanged();
            _navManager.NavigateTo("profile/edit", true);
        }
    }

    private async Task UpdatePassword()
    {
        using var db = factory.CreateDbContext();
        var existingUser = await _usersService.FindUserAsync(user.Email, _usersService.GetSha256Hash(passwordForm.CurrentPassword));

        if (existingUser == null)
        {
            passwordFormMessage = "Current password was incorrect.";
            return;
        }

        existingUser.Password = _usersService.GetSha256Hash(passwordForm.NewPassword);

        db.Users.Save(existingUser);
        StateHasChanged();
        _navManager.NavigateTo("profile/edit", true);
    }

    public class ProfileInformationForm
    {
        [Required]
        public string Name { get; set; }

        [EmailAddress(ErrorMessage = "Invalid email address.")]
        [Required(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; }
    }

    public class PasswordForm
    {
        [Required(ErrorMessage = "Current Password is required")]
        public string CurrentPassword { get; set; }

        [Required(ErrorMessage = "New Password is required")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "The New Password and Confirm Password do not match.")]
        public string ConfirmPassword { get; set; }
    }
}